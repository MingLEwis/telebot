import asyncio
import nest_asyncio
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackContext, MessageHandler, filters
)
from telegram import Update, ChatPermissions, BotCommand
from telegram.error import BadRequest
import logging
import random
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import re
import json
import os
import requests
import openai

nest_asyncio.apply()

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='app.log',
    filemode='a'
)
logger = logging.getLogger(__name__)


# H√†m start
async def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    first_name = user.first_name if user.first_name else "Kh√¥ng c√≥ t√™n"
    last_name = user.last_name if user.last_name else ""
    full_name = f"{first_name} {last_name}".strip()

    greetings = [
        f"Hi {full_name}, r·∫•t vui ƒë∆∞·ª£c l√†m quen! üòà",
        f"Yoh {full_name}, ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot c·ªßa t√¥i! ü§ñ",
        f"Hello {full_name}, hi v·ªçng b·∫°n c√≥ m·ªôt ng√†y tuy·ªát v·ªùi! üåü",
        f"Ch√†o {full_name}, h√¥m nay b·∫°n th·∫ø n√†o? üòä",
        f"H√¢y du, w√°ts s√∫b {full_name}! üòÅ"
    ]

    greeting_message = random.choice(greetings)
    await update.message.reply_text(greeting_message)

# H√†m AT Ch√†o m·ª´ng
async def greet_new_member(update: Update, context: CallbackContext) -> None:
    for member in update.message.new_chat_members:
        first_name = member.first_name if member.first_name else "Kh√¥ng c√≥ t√™n"
        last_name = member.last_name if member.last_name else ""
        full_name = f"{first_name} {last_name}".strip()

        greetings = [
            f"Ch√†o m·ª´ng {full_name} ƒë·∫øn v·ªõi nh√≥m! üòà",
            f"Xin ch√†o {full_name}, r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! ü§ó",
            f"Hello {full_name}, ch√†o m·ª´ng b·∫°n tham gia! üéâ",
            f"Ch√†o {full_name}, hi v·ªçng b·∫°n c√≥ kho·∫£ng th·ªùi gian vui v·∫ª! üòä",
            f"H·ªÅ l·ªë, nai tu m√≠t du {full_name}! üòÅ"
        ]

        greeting_message = random.choice(greetings)
        await update.message.reply_text(greeting_message)

# H√†m AT T·∫°m bi·ªát
async def farewell_member(update: Update, context: CallbackContext) -> None:
    left_member = update.message.left_chat_member
    first_name = left_member.first_name if left_member.first_name else "Kh√¥ng c√≥ t√™n"
    last_name = left_member.last_name if left_member.last_name else ""
    full_name = f"{first_name} {last_name}".strip()

    farewells = [
        f"T·∫°m bi·ªát {full_name}, h·∫πn g·∫∑p l·∫°i! üëã",
        f"{full_name} ƒë√£ r·ªùi kh·ªèi nh√≥m. Kh√¥ng ti·ªÖn! üåà",
        f"Bye {full_name}, hy v·ªçng s·∫Ω g·∫∑p l·∫°i! üôå",
        f"R·∫•t ti·∫øc khi ph·∫£i n√≥i l·ªùi t·∫°m bi·ªát, {full_name}. üò¢",
        f"{full_name} ƒë√£ r·ªùi nh√≥m. Ch√∫c may m·∫Øn! üçÄ"
    ]

    farewell_message = random.choice(farewells)
    await update.message.reply_text(farewell_message)

# H√†m blacklist
async def blacklist(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        'Thu·∫≠t ng·ªØ ‚Äúban udid‚Äù v√† ‚Äúunban‚Äù xu·∫•t hi·ªán v√†o kho·∫£ng nƒÉm 2020, nh∆∞ng tr·ªü n√™n ph·ªï bi·∫øn h∆°n g·∫ßn ƒë√¢y.\n'
        'Ch·ª©ng ch·ªâ mi·ªÖn ph√≠ l√† ch·ª©ng ch·ªâ doanh nghi·ªáp, c√≥ th·ªÉ b·ªã r√≤ r·ªâ ho·∫∑c mua t·ª´ ch·ª£ ƒëen. Khi s·ª≠ d·ª•ng, kh√¥ng cung c·∫•p th√¥ng tin g√¨ ƒë·∫øn m√°y ch·ªß Apple n√™n kh√¥ng b·ªã c·∫•m, ch·ªâ khi thu h·ªìi qu√° nhi·ªÅu th√¨ b·ªã BLACKLIST.\n'
        'N·∫øu d√πng ch·ª©ng ch·ªâ c√° nh√¢n b·ªã Apple thu h·ªìi, s·∫Ω kh√¥ng b·ªã c·∫•m nh∆∞ng th·ªùi gian duy·ªát UDID c√≥ th·ªÉ k√©o d√†i 14-30 ng√†y.'
    )

# H√†m l·∫•y tin t·ª©c
def get_news():
    list_news = []
    r = requests.get("https://vnexpress.net/")
    soup = BeautifulSoup(r.text, 'html.parser')
    mydivs = soup.find_all("h3", {"class": "title-news"})

    for index, new in enumerate(mydivs[:7], start=1):
        newdict = {}
        link = urljoin("https://vnexpress.net/", new.a.get('href'))
        title_with_link = f'{index}. <a href="{link}">{new.a.get("title")}</a>'
        newdict["title"] = title_with_link
        list_news.append(newdict)

    return list_news

async def news(update: Update, context: CallbackContext) -> None:
    data = get_news()
    news_message = "\n".join([item["title"] for item in data])
    await update.message.reply_html(news_message, disable_web_page_preview=True)

# Ki·ªÉm tra admin
async def is_admin(update: Update, user_id: int) -> bool:
    chat_id = update.effective_chat.id
    member = await update.effective_chat.get_member(user_id)
    return member.status in ['administrator', 'creator']

# H√†m random
async def random_keyword(update: Update, context: CallbackContext) -> None:
    question = update.message.text.split("/random", 1)[1].strip()

    keywords = [keyword.strip() for keyword in question.split(",")]

    if len(keywords) >= 2:
        selected_keyword = random.choice(keywords)
        await update.message.reply_text(f'K·∫øt qu·∫£ random: {selected_keyword}')
    else:
        await update.message.reply_text('Th√™m √≠t nh·∫•t 2 t·ª´ kho√°.')

# H√†m th·ªùi ti·∫øt
def get_tt(location):
    api_key = "ca22122a90b399f9e1911fcb43763abd" 
    base_url = "http://api.openweathermap.org/data/2.5/weather?"
    complete_url = base_url + "q=" + location + "&appid=" + api_key + "&units=metric&lang=vi"
    response = requests.get(complete_url)
    return response.json()

def get_city_name(code):
    cities = {
        "hcm": "Ho Chi Minh City", "hn": "Ha Noi", "dn": "Da Nang", "ct": "Can Tho",
        "hp": "Hai Phong", "vt": "Vung Tau", "dl": "Da Lat", "bd": "Binh Duong",
        "nt": "Nha Trang", "pt": "Phan Thiet", "hl": "Ha Long"
    }
    return cities.get(code.lower(), code)

async def weather(update: Update, context: CallbackContext) -> None:
    location_code = " ".join(context.args)
    if not location_code:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p t√™n th√†nh ph·ªë.")
        return

    location = get_city_name(location_code)
    weather_data = get_tt(location)
    if weather_data["cod"] == "404":
        await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho: {location}")
        return

    main = weather_data["main"]
    weather = weather_data["weather"][0]
    temp_min = main["temp_min"]
    temp_max = main["temp_max"]
    temp_avg = (temp_min + temp_max) / 2  
    pressure = main["pressure"]
    humidity = main["humidity"]
    wind_speed = weather_data["wind"]["speed"]
    weather_description = weather["description"].capitalize()

    visibility_meters = weather_data.get("visibility", "N/A")
    if visibility_meters != "N/A":
        visibility_kilometers = visibility_meters / 1000  
        visibility_str = f"{visibility_kilometers:.2f} km"
    else:
        visibility_str = "N/A"

    weather_icons = {
        "thermometer": "üå°Ô∏è", "barometer": "üìä", "droplet": "üíß", "wind": "üå¨Ô∏è", "visibility": "üëÅÔ∏è"
    }

    weather_message = (
        f"T·∫°i {location}:\n"
        f"M√¥ t·∫£: {weather_description}\n"
        f"Nhi·ªát ƒë·ªô trung b√¨nh {weather_icons['thermometer']}: {temp_avg:.2f}¬∞C\n"
        f"√Åp su·∫•t {weather_icons['barometer']}: {pressure} hPa\n"
        f"ƒê·ªô ·∫©m {weather_icons['droplet']}: {humidity}%\n"
        f"T·ªëc ƒë·ªô gi√≥ {weather_icons['wind']}: {wind_speed} m/s\n"
        f"T·∫ßm nh√¨n {weather_icons['visibility']}: {visibility_str}\n"
    )

    await update.message.reply_text(weather_message)

# H√†m mute
async def mute(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if not await is_admin(update, user.id):
        await update.message.reply_text('B·ªô m√†y l√† ADMIN h·∫£? üòè')
        return

    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        user_id = target_user.id
        username = target_user.username
        chat_id = update.message.chat_id
        try:
            await context.bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(can_send_messages=False)
            )
            await update.message.reply_text(f'ƒê√£ t·∫Øt ti·∫øng th√†nh vi√™n @{username}.\nID: {user_id}')
        except BadRequest as e:
            await update.message.reply_text(f'Kh√¥ng th·ªÉ t·∫Øt ti·∫øng th√†nh vi√™n: {e.message}')
    else:
        await update.message.reply_text('Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn c·ªßa th√†nh vi√™n b·∫°n mu·ªën t·∫Øt ti·∫øng.')

# H√†m unmute
async def unmute(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if not await is_admin(update, user.id):
        await update.message.reply_text('B·ªô m√†y l√† ADMIN hay g√¨? ü§î')
        return

    chat_id = update.message.chat_id
    target_user = None
    user_id = None

    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    else:
        message_text = update.message.text
        username = extract_username(message_text)
        if username:
            members = await context.bot.get_chat_members(chat_id)
            for member in members:
                if member.user.username.lower() == username.lower():
                    target_user = member.user
                    break

    if target_user:
        user_id = target_user.id
        username = target_user.username
    else:
        await update.message.reply_text(
            "Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn ho·∫∑c cung c·∫•p @username c·ªßa th√†nh vi√™n b·∫°n mu·ªën b·∫≠t ti·∫øng."
        )
        return

    try:
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=True,
            can_send_polls=True, can_send_other_messages=True,
            can_add_web_page_previews=True, can_change_info=True,
            can_invite_users=True, can_pin_messages=True
            )
        )
        await update.message.reply_text(f'ƒê√£ b·ªè t·∫Øt ti·∫øng th√†nh vi√™n @{username}')
    except Exception as e:
        await update.message.reply_text(f'L·ªói: {e}')

def extract_username(text):
    username_regex = r"@(\w+)"
    match = re.search(username_regex, text)
    if match:
        return match.group(1)
    return None

# H√†m ban
async def ban(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if not await is_admin(update, user.id):
        await update.message.reply_text('B·ªô m√†y l√† ADMIN h·∫£? üòè')
        return

    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        user_id = target_user.id
        username = target_user.username
        chat_id = update.message.chat_id
        try:
            await context.bot.ban_chat_member(chat_id, user_id)
            await update.message.reply_text(f'ƒê√£ c·∫•m th√†nh vi√™n @{username}.')
        except BadRequest as e:
            await update.message.reply_text(f'Kh√¥ng th·ªÉ c·∫•m th√†nh vi√™n: {e.message}')
    else:
        await update.message.reply_text('Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn c·ªßa th√†nh vi√™n b·∫°n mu·ªën c·∫•m.')

# H√†m unban
async def unban(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if not await is_admin(update, user.id):
        await update.message.reply_text('B·ªô m√†y l√† ADMIN hay g√¨? ü§î')
        return

    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        user_id = target_user.id
        username = target_user.username
        chat_id = update.message.chat_id
        try:
            await context.bot.unban_chat_member(chat_id, user_id)
            await update.message.reply_text(f'ƒê√£ b·ªè c·∫•m th√†nh vi√™n @{username}.')
        except BadRequest as e:
            await update.message.reply_text(f'Kh√¥ng th·ªÉ b·ªè c·∫•m th√†nh vi√™n: {e.message}')

# Kh·ªüi t·∫°o l·ªánh
async def set_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "Th·ª≠ ch√†o h·ªèi th√¥i."),
        BotCommand("news", "Tin t·ª©c m·ªõi."),
        BotCommand("tt", "Th·ªùi ti·∫øt."),
        BotCommand("blacklist", "Blacklist iOS."),
        BotCommand("random", "Ch·ªçn ng·∫´u nhi√™n m·ªôt t·ª´ kh√≥a."),
        BotCommand("ask", "H·ªèi ƒë√°p.")
    ])

async def main():
    application = ApplicationBuilder().token("7416926704:AAFa4a34XuPaFijKTRNCapb75yyaRoUnf3c").build()
# ƒêƒÉng k√Ω l·ªánh
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("news", news))
    application.add_handler(CommandHandler("tt", weather))
    application.add_handler(CommandHandler("mute", mute))
    application.add_handler(CommandHandler("unmute", unmute))
    application.add_handler(CommandHandler("ban", ban))
    application.add_handler(CommandHandler("unban", unban))
    application.add_handler(CommandHandler("blacklist", blacklist))
    application.add_handler(CommandHandler("random", random_keyword))
    application.add_handler(CommandHandler("ask", ask_command))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_member))
    application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, farewell_member))

    await set_commands(application)
    await application.run_polling()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    if loop.is_running():
        nest_asyncio.apply()
        loop.create_task(main())
    else:
        loop.run_until_complete(main())
